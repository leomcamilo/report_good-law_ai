---
title: "An√°lise de Discrep√¢ncias (Q2 & Q3) na Avalia√ß√£o de Projetos da Lei do Bem: Uma An√°lise por Setor, Tipo e Natureza"
author: "Analista de Dados - MCTI"
date: today
format:
  html:
    theme: cosmo
    toc: true
    toc-depth: 3
    toc-location: left
    code-fold: true
    code-summary: "Mostrar c√≥digo"
    number-sections: true
    highlight-style: github
    css: custom.css
  pdf:
    latex_engine: xelatex
    mainfont: Arial
    fontsize: 12pt
    lineheight: 1.5
    linestretch: 1.5
    geometry: "left=3cm, top=3cm, right=2cm, bottom=2cm"
    keep-tex: false
    number-sections: true
    include-in-header: config.tex
execute:
  echo: false
  warning: false
  message: false
jupyter: python3
---

# Introdu√ß√£o

Esta an√°lise aprofunda a investiga√ß√£o sobre as diverg√™ncias no processo de avalia√ß√£o de projetos da Lei do Bem, focando exclusivamente nos quadrantes de discord√¢ncia entre avaliadores. O estudo examina as decis√µes conflitantes entre analistas internos do Minist√©rio (fase DO) e pareceristas externos (pesquisadores ad hoc).

## Defini√ß√£o dos Quadrantes de Discord√¢ncia

Os quadrantes de discord√¢ncia representam situa√ß√µes onde h√° diverg√™ncia entre os avaliadores:

- **Quadrante 2 (Q2)**: Parecerista recomenda, mas Minist√©rio N√ÉO recomenda
  - **Risco associado**: Volume excessivo de recursos e contesta√ß√µes por parte das empresas, sobrecarregando o processo administrativo
  - **Interpreta√ß√£o**: Minist√©rio sendo mais rigoroso que especialistas externos

- **Quadrante 3 (Q3)**: Minist√©rio recomenda, mas Parecerista N√ÉO recomenda  
  - **Risco associado**: Potencial risco de compliance - projetos sem m√©rito t√©cnico adequado podem estar recebendo benef√≠cio fiscal
  - **Interpreta√ß√£o**: Pesquisadores externos sendo mais rigorosos que o Minist√©rio

## Objetivo da An√°lise

Identificar padr√µes e poss√≠veis causas para essas diverg√™ncias atrav√©s do cruzamento de tr√™s vari√°veis-chave:

1. **Setor do Projeto** (`do_set_nosetor`)
2. **Tipo de Projeto** (`daproj_tppbpade`): PB - Pesquisa B√°sica, PA - Pesquisa Aplicada, DE - Desenvolvimento Experimental
3. **Natureza do Projeto** (`daproj_tpnatureza`): Produto, Processo, Servi√ßo

# Setup e Prepara√ß√£o dos Dados

```{python}
#| label: setup
#| code-fold: false

# Importar bibliotecas necess√°rias
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import warnings
warnings.filterwarnings('ignore')

# Configura√ß√µes de visualiza√ß√£o
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', 100)
pd.set_option('display.width', 1000)

# Configurar template do Plotly
import plotly.io as pio
pio.templates.default = "plotly_white"
```

```{python}
#| label: carregamento-dados

# Carregar o dataset principal
print("Carregando dados...")
arquivo_dados = 'csv_longo/projetos_lei_do_bem_DETALHADO_LINHA_UNICA.csv'
df = pd.read_csv(arquivo_dados, sep=';', encoding='utf-8')

print(f"‚úÖ Dataset carregado: {len(df):,} registros")
print(f"‚úÖ Total de colunas: {len(df.columns)}")

# Fun√ß√£o para padronizar decis√µes (reutilizada do contexto)
def padronizar_decisao(decisao):
    if pd.isna(decisao):
        return np.nan
    decisao_str = str(decisao).strip().upper()
    if 'RECOMENDADO' in decisao_str and 'N√ÉO' not in decisao_str:
        return 'Recomendado'
    elif 'N√ÉO RECOMENDADO' in decisao_str:
        return 'N√£o Recomendado'
    else:
        return 'Outro'

# Aplicar padroniza√ß√£o
df['decisao_pesquisador'] = df['do_taaproj_notipoavaliacaoanalise'].apply(padronizar_decisao)
df['decisao_ministerio'] = df['p_taaproj_notipoavaliacaoanalise'].apply(padronizar_decisao)

# Filtrar apenas registros com decis√µes v√°lidas
df_valido = df[
    (df['decisao_pesquisador'].isin(['Recomendado', 'N√£o Recomendado'])) & 
    (df['decisao_ministerio'].isin(['Recomendado', 'N√£o Recomendado']))
].copy()

print(f"\n‚úÖ Projetos com decis√µes v√°lidas: {len(df_valido):,}")
```

```{python}
#| label: criar-quadrantes

# Criar classifica√ß√£o de quadrantes
def classificar_quadrante(row):
    pesq = row['decisao_pesquisador']
    min = row['decisao_ministerio']
    
    if pesq == 'Recomendado' and min == 'Recomendado':
        return 'Q1'
    elif pesq == 'Recomendado' and min == 'N√£o Recomendado':
        return 'Q2'
    elif pesq == 'N√£o Recomendado' and min == 'Recomendado':
        return 'Q3'
    elif pesq == 'N√£o Recomendado' and min == 'N√£o Recomendado':
        return 'Q4'
    else:
        return None

df_valido['quadrante'] = df_valido.apply(classificar_quadrante, axis=1)

# Estat√≠sticas gerais dos quadrantes
print("üìä Distribui√ß√£o dos Quadrantes:")
print(df_valido['quadrante'].value_counts().sort_index())
print(f"\nTotal de projetos analisados: {len(df_valido):,}")
```

# Filtragem e Foco na Discrep√¢ncia

```{python}
#| label: filtrar-discrepancias

# Filtrar apenas Q2 e Q3 (quadrantes de discord√¢ncia)
df_discrepancia = df_valido[df_valido['quadrante'].isin(['Q2', 'Q3'])].copy()

print(f"üéØ Total de projetos com discrep√¢ncia (Q2 + Q3): {len(df_discrepancia):,}")
print(f"üìä Percentual de discrep√¢ncia: {len(df_discrepancia)/len(df_valido)*100:.1f}%")
print(f"\nDistribui√ß√£o das discrep√¢ncias:")
print(df_discrepancia['quadrante'].value_counts())

# Verificar se as vari√°veis necess√°rias existem
print("\nüîç Verificando vari√°veis de an√°lise:")
variaveis_necessarias = ['do_set_nosetor', 'daproj_tppbpade', 'daproj_tpnatureza']
for var in variaveis_necessarias:
    if var in df_discrepancia.columns:
        print(f"‚úÖ {var}: encontrada")
        print(f"   Valores √∫nicos: {df_discrepancia[var].nunique()}")
    else:
        print(f"‚ùå {var}: N√ÉO encontrada")
```

# An√°lise Quantitativa Cruzada

```{python}
#| label: analise-cruzada

# Criar combina√ß√£o das tr√™s vari√°veis
df_discrepancia['combinacao'] = (
    df_discrepancia['do_set_nosetor'].fillna('N√£o especificado') + ' | ' +
    df_discrepancia['daproj_tppbpade'].fillna('N√£o especificado') + ' | ' +
    df_discrepancia['daproj_tpnatureza'].fillna('N√£o especificado')
)

# Top 10 combina√ß√µes mais frequentes em discord√¢ncia
top_combinacoes = df_discrepancia['combinacao'].value_counts().head(10)

print("üî• TOP 10 COMBINA√á√ïES COM MAIOR DISCORD√ÇNCIA:")
print("=" * 80)
for i, (comb, count) in enumerate(top_combinacoes.items(), 1):
    percentual = count / len(df_discrepancia) * 100
    print(f"{i:2d}. {comb}")
    print(f"    ‚Üí {count:,} projetos ({percentual:.1f}% das discord√¢ncias)")
print("=" * 80)

# Criar DataFrame para visualiza√ß√£o
df_top_comb = pd.DataFrame({
    'Combina√ß√£o': top_combinacoes.index,
    'Contagem': top_combinacoes.values,
    'Percentual': (top_combinacoes.values / len(df_discrepancia) * 100).round(1)
})

# Verificar a estrutura dos splits antes de aplicar
print("\nüîç Verificando estrutura das combina√ß√µes:")
split_result = df_top_comb['Combina√ß√£o'].str.split(' | ', expand=True)
print(f"N√∫mero de colunas retornadas pelo split: {split_result.shape[1]}")
print(f"Primeiras linhas do split:")
print(split_result.head())

# Aplicar split manual de forma mais robusta
print("‚ö†Ô∏è Aplicando split manual para garantir consist√™ncia...")
df_top_comb['Setor'] = ''
df_top_comb['Tipo'] = ''
df_top_comb['Natureza'] = ''

for idx, comb in enumerate(df_top_comb['Combina√ß√£o']):
    parts = comb.split(' | ')
    df_top_comb.loc[idx, 'Setor'] = parts[0] if len(parts) > 0 else 'N/A'
    df_top_comb.loc[idx, 'Tipo'] = parts[1] if len(parts) > 1 else 'N/A'
    df_top_comb.loc[idx, 'Natureza'] = parts[2] if len(parts) > 2 else 'N/A'

print("\n‚úÖ Componentes separadas com sucesso:")
print(df_top_comb[['Setor', 'Tipo', 'Natureza']].head())
```

```{python}
#| label: visualizacao-hotspots

# Visualiza√ß√£o dos hotspots de discord√¢ncia
fig = px.bar(
    df_top_comb, 
    x='Contagem', 
    y='Combina√ß√£o',
    orientation='h',
    title='Top 10 Combina√ß√µes de Setor + Tipo + Natureza com Maior Discord√¢ncia',
    labels={'Contagem': 'N√∫mero de Projetos', 'Combina√ß√£o': 'Setor | Tipo | Natureza'},
    text='Contagem',
    color='Percentual',
    color_continuous_scale='Reds'
)

fig.update_traces(texttemplate='%{text:,} (%{customdata[0]:.1f}%)', 
                  customdata=df_top_comb[['Percentual']],
                  textposition='outside')
fig.update_layout(height=600, width=1000, showlegend=False)
fig.update_xaxes(title="N√∫mero de Projetos com Discord√¢ncia")
fig.update_coloraxes(colorbar_title="% das<br>Discord√¢ncias")

fig.show()
```

# An√°lise Detalhada por Quadrante

## An√°lise do Quadrante 2 (Minist√©rio mais rigoroso)

```{python}
#| label: analise-q2

# Filtrar apenas Q2
df_q2 = df_discrepancia[df_discrepancia['quadrante'] == 'Q2'].copy()
print(f"üìä Total de projetos em Q2: {len(df_q2):,}")
print(f"üìä Percentual do Q2 sobre total de discrep√¢ncias: {len(df_q2)/len(df_discrepancia)*100:.1f}%")

# An√°lise por setor
print("\nüè≠ Distribui√ß√£o por Setor em Q2:")
q2_setor = df_q2['do_set_nosetor'].value_counts()
for setor, count in q2_setor.head(10).items():
    print(f"  ‚Ä¢ {setor}: {count:,} projetos ({count/len(df_q2)*100:.1f}%)")
```

### Visualiza√ß√£o Q2: Distribui√ß√£o por Tipo de Projeto

```{python}
#| label: q2-grafico-tipo

# Preparar dados para visualiza√ß√£o por tipo
df_q2_tipo = df_q2.groupby(['do_set_nosetor', 'daproj_tppbpade']).size().reset_index(name='count')
df_q2_tipo = df_q2_tipo[df_q2_tipo['do_set_nosetor'].isin(q2_setor.head(7).index)]

# Gr√°fico 1: Q2 por Tipo de Projeto
fig_q2_tipo = px.bar(
    df_q2_tipo,
    x='do_set_nosetor',
    y='count',
    color='daproj_tppbpade',
    title='Q2: Distribui√ß√£o por Setor e Tipo de Projeto<br><sub>Pesquisador recomenda, Minist√©rio N√ÉO recomenda</sub>',
    labels={
        'do_set_nosetor': 'Setor',
        'count': 'N√∫mero de Projetos',
        'daproj_tppbpade': 'Tipo de Projeto'
    },
    color_discrete_map={
        'DE - Desenvolvimento Experimental': '#e74c3c',
        'PA - Pesquisa Aplicada': '#3498db',
        'PB - Pesquisa B√°sica': '#2ecc71'
    }
)

fig_q2_tipo.update_layout(
    xaxis_tickangle=-45,
    height=500,
    width=1000,
    showlegend=True,
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=1.02,
        xanchor="right",
        x=1
    )
)

fig_q2_tipo.show()

# An√°lise textual
print("\nüìù An√°lise Q2 - Tipo de Projeto:")
for setor in q2_setor.head(3).index:
    df_setor = df_q2[df_q2['do_set_nosetor'] == setor]
    tipo_dist = df_setor['daproj_tppbpade'].value_counts()
    print(f"\n{setor}:")
    for tipo, count in tipo_dist.items():
        if pd.notna(tipo):
            print(f"  ‚Ä¢ {tipo}: {count} projetos ({count/len(df_setor)*100:.1f}%)")
```

### Visualiza√ß√£o Q2: Distribui√ß√£o por Natureza do Projeto

```{python}
#| label: q2-grafico-natureza

# Preparar dados para visualiza√ß√£o por natureza
df_q2_natureza = df_q2.groupby(['do_set_nosetor', 'daproj_tpnatureza']).size().reset_index(name='count')
df_q2_natureza = df_q2_natureza[df_q2_natureza['do_set_nosetor'].isin(q2_setor.head(7).index)]

# Gr√°fico 2: Q2 por Natureza do Projeto
fig_q2_natureza = px.bar(
    df_q2_natureza,
    x='do_set_nosetor',
    y='count',
    color='daproj_tpnatureza',
    title='Q2: Distribui√ß√£o por Setor e Natureza do Projeto<br><sub>Pesquisador recomenda, Minist√©rio N√ÉO recomenda</sub>',
    labels={
        'do_set_nosetor': 'Setor',
        'count': 'N√∫mero de Projetos',
        'daproj_tpnatureza': 'Natureza do Projeto'
    },
    color_discrete_map={
        'Produto': '#9b59b6',
        'Processo': '#f39c12',
        'Servi√ßo': '#1abc9c'
    }
)

fig_q2_natureza.update_layout(
    xaxis_tickangle=-45,
    height=500,
    width=1000,
    showlegend=True,
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=1.02,
        xanchor="right",
        x=1
    )
)

fig_q2_natureza.show()

# An√°lise textual
print("\nüìù An√°lise Q2 - Natureza do Projeto:")
for setor in q2_setor.head(3).index:
    df_setor = df_q2[df_q2['do_set_nosetor'] == setor]
    natureza_dist = df_setor['daproj_tpnatureza'].value_counts()
    print(f"\n{setor}:")
    for natureza, count in natureza_dist.items():
        if pd.notna(natureza):
            print(f"  ‚Ä¢ {natureza}: {count} projetos ({count/len(df_setor)*100:.1f}%)")
```

### Coment√°rios sobre Q2

No Quadrante 2, onde o Minist√©rio √© mais rigoroso que os pareceristas externos:

1. **Concentra√ß√£o Setorial**: O setor de TIC domina as discord√¢ncias, representando uma parcela significativa dos casos onde o Minist√©rio rejeita projetos aprovados por especialistas externos.

2. **Padr√£o por Tipo**: H√° uma tend√™ncia clara de maior rigor do Minist√©rio em projetos de Desenvolvimento Experimental (DE), sugerindo crit√©rios mais restritivos para projetos de natureza mais aplicada.

3. **Padr√£o por Natureza**: Projetos classificados como "Produto" enfrentam maior rigor do Minist√©rio, possivelmente devido a crit√©rios mais espec√≠ficos de inova√ß√£o tecnol√≥gica.

## An√°lise do Quadrante 3 (Pesquisador mais rigoroso)

```{python}
#| label: analise-q3

# Filtrar apenas Q3
df_q3 = df_discrepancia[df_discrepancia['quadrante'] == 'Q3'].copy()
print(f"üìä Total de projetos em Q3: {len(df_q3):,}")
print(f"üìä Percentual do Q3 sobre total de discrep√¢ncias: {len(df_q3)/len(df_discrepancia)*100:.1f}%")

# An√°lise por setor
print("\nüè≠ Distribui√ß√£o por Setor em Q3:")
q3_setor = df_q3['do_set_nosetor'].value_counts()
for setor, count in q3_setor.head(10).items():
    print(f"  ‚Ä¢ {setor}: {count:,} projetos ({count/len(df_q3)*100:.1f}%)")
```

### Visualiza√ß√£o Q3: Distribui√ß√£o por Tipo de Projeto

```{python}
#| label: q3-grafico-tipo

# Preparar dados para visualiza√ß√£o por tipo
df_q3_tipo = df_q3.groupby(['do_set_nosetor', 'daproj_tppbpade']).size().reset_index(name='count')
df_q3_tipo = df_q3_tipo[df_q3_tipo['do_set_nosetor'].isin(q3_setor.head(7).index)]

# Gr√°fico 1: Q3 por Tipo de Projeto
fig_q3_tipo = px.bar(
    df_q3_tipo,
    x='do_set_nosetor',
    y='count',
    color='daproj_tppbpade',
    title='Q3: Distribui√ß√£o por Setor e Tipo de Projeto<br><sub>Minist√©rio recomenda, Pesquisador N√ÉO recomenda</sub>',
    labels={
        'do_set_nosetor': 'Setor',
        'count': 'N√∫mero de Projetos',
        'daproj_tppbpade': 'Tipo de Projeto'
    },
    color_discrete_map={
        'DE - Desenvolvimento Experimental': '#e74c3c',
        'PA - Pesquisa Aplicada': '#3498db',
        'PB - Pesquisa B√°sica': '#2ecc71'
    }
)

fig_q3_tipo.update_layout(
    xaxis_tickangle=-45,
    height=500,
    width=1000,
    showlegend=True,
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=1.02,
        xanchor="right",
        x=1
    )
)

fig_q3_tipo.show()

# An√°lise textual
print("\nüìù An√°lise Q3 - Tipo de Projeto:")
for setor in q3_setor.head(3).index:
    df_setor = df_q3[df_q3['do_set_nosetor'] == setor]
    tipo_dist = df_setor['daproj_tppbpade'].value_counts()
    print(f"\n{setor}:")
    for tipo, count in tipo_dist.items():
        if pd.notna(tipo):
            print(f"  ‚Ä¢ {tipo}: {count} projetos ({count/len(df_setor)*100:.1f}%)")
```

### Visualiza√ß√£o Q3: Distribui√ß√£o por Natureza do Projeto

```{python}
#| label: q3-grafico-natureza

# Preparar dados para visualiza√ß√£o por natureza
df_q3_natureza = df_q3.groupby(['do_set_nosetor', 'daproj_tpnatureza']).size().reset_index(name='count')
df_q3_natureza = df_q3_natureza[df_q3_natureza['do_set_nosetor'].isin(q3_setor.head(7).index)]

# Gr√°fico 2: Q3 por Natureza do Projeto
fig_q3_natureza = px.bar(
    df_q3_natureza,
    x='do_set_nosetor',
    y='count',
    color='daproj_tpnatureza',
    title='Q3: Distribui√ß√£o por Setor e Natureza do Projeto<br><sub>Minist√©rio recomenda, Pesquisador N√ÉO recomenda</sub>',
    labels={
        'do_set_nosetor': 'Setor',
        'count': 'N√∫mero de Projetos',
        'daproj_tpnatureza': 'Natureza do Projeto'
    },
    color_discrete_map={
        'Produto': '#9b59b6',
        'Processo': '#f39c12',
        'Servi√ßo': '#1abc9c'
    }
)

fig_q3_natureza.update_layout(
    xaxis_tickangle=-45,
    height=500,
    width=1000,
    showlegend=True,
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=1.02,
        xanchor="right",
        x=1
    )
)

fig_q3_natureza.show()

# An√°lise textual
print("\nüìù An√°lise Q3 - Natureza do Projeto:")
for setor in q3_setor.head(3).index:
    df_setor = df_q3[df_q3['do_set_nosetor'] == setor]
    natureza_dist = df_setor['daproj_tpnatureza'].value_counts()
    print(f"\n{setor}:")
    for natureza, count in natureza_dist.items():
        if pd.notna(natureza):
            print(f"  ‚Ä¢ {natureza}: {count} projetos ({count/len(df_setor)*100:.1f}%)")
```

### Coment√°rios sobre Q3

No Quadrante 3, onde os pesquisadores externos s√£o mais rigorosos que o Minist√©rio:

1. **Diferen√ßa Setorial**: A distribui√ß√£o setorial em Q3 mostra padr√µes distintos de Q2, com maior presen√ßa de setores tradicionais como Mec√¢nica e Transporte.

2. **Padr√£o por Tipo**: Diferentemente de Q2, em Q3 observamos uma distribui√ß√£o mais equilibrada entre os tipos de projeto, sugerindo que os pesquisadores externos aplicam crit√©rios mais uniformes.

3. **Padr√£o por Natureza**: Projetos de "Processo" aparecem com maior frequ√™ncia em Q3, indicando que pesquisadores externos podem ter crit√©rios mais rigorosos para inova√ß√µes em processos produtivos.

# Compara√ß√£o e S√≠ntese dos Insights

```{python}
#| label: comparacao-q2-q3

# Criar compara√ß√£o direta Q2 vs Q3
print("üîÑ COMPARA√á√ÉO DIRETA Q2 vs Q3")
print("=" * 80)

# 1. Compara√ß√£o por Setor
print("\n1. AN√ÅLISE COMPARATIVA POR SETOR:")
setores_comuns = set(q2_setor.head(10).index) & set(q3_setor.head(10).index)

df_comparacao_setor = pd.DataFrame({
    'Setor': list(setores_comuns),
    'Q2_Count': [df_q2[df_q2['do_set_nosetor'] == s].shape[0] for s in setores_comuns],
    'Q3_Count': [df_q3[df_q3['do_set_nosetor'] == s].shape[0] for s in setores_comuns]
})

df_comparacao_setor['Q2_Percent'] = df_comparacao_setor['Q2_Count'] / len(df_q2) * 100
df_comparacao_setor['Q3_Percent'] = df_comparacao_setor['Q3_Count'] / len(df_q3) * 100
df_comparacao_setor['Diferenca'] = df_comparacao_setor['Q2_Percent'] - df_comparacao_setor['Q3_Percent']
df_comparacao_setor = df_comparacao_setor.sort_values('Diferenca', ascending=False)

print("\nSetores com maior diferen√ßa entre Q2 e Q3:")
for _, row in df_comparacao_setor.iterrows():
    print(f"\n{row['Setor']}:")
    print(f"  Q2: {row['Q2_Count']:,} projetos ({row['Q2_Percent']:.1f}%)")
    print(f"  Q3: {row['Q3_Count']:,} projetos ({row['Q3_Percent']:.1f}%)")
    print(f"  Diferen√ßa: {row['Diferenca']:+.1f}% {'(Minist√©rio mais rigoroso)' if row['Diferenca'] > 0 else '(Pesquisador mais rigoroso)'}")
```

```{python}
#| label: hotspots-especificos

# 2. Identifica√ß√£o de Hotspots Espec√≠ficos
print("\n\n2. HOTSPOTS ESPEC√çFICOS DE DIVERG√äNCIA:")
print("=" * 80)

# An√°lise para TIC
if 'TIC' in df_discrepancia['do_set_nosetor'].values:
    df_tic = df_discrepancia[df_discrepancia['do_set_nosetor'] == 'TIC']
    df_tic_q2 = df_tic[df_tic['quadrante'] == 'Q2']
    df_tic_q3 = df_tic[df_tic['quadrante'] == 'Q3']
    
    print("\nüñ•Ô∏è SETOR TIC:")
    
    # Q2 - TIC
    if len(df_tic_q2) > 0:
        print(f"\nQ2 (Minist√©rio mais rigoroso): {len(df_tic_q2)} projetos")
        tipo_de = df_tic_q2[df_tic_q2['daproj_tppbpade'] == 'DE - Desenvolvimento Experimental']
        if len(tipo_de) > 0:
            natureza_servico = tipo_de[tipo_de['daproj_tpnatureza'] == 'Servi√ßo']
            print(f"  ‚Ä¢ Desenvolvimento Experimental + Servi√ßo: {len(natureza_servico)} projetos")
            if len(natureza_servico) > 0:
                print(f"    ‚Üí Representa {len(natureza_servico)/len(df_tic_q2)*100:.1f}% do Q2 em TIC")
                print("    ‚ö†Ô∏è HOTSPOT IDENTIFICADO: Alta discord√¢ncia em projetos DE/Servi√ßo")
    
    # Q3 - TIC
    if len(df_tic_q3) > 0:
        print(f"\nQ3 (Pesquisador mais rigoroso): {len(df_tic_q3)} projetos")
        tipo_dist = df_tic_q3['daproj_tppbpade'].value_counts()
        print("  Distribui√ß√£o por tipo:")
        for tipo, count in tipo_dist.head(3).items():
            print(f"    ‚Ä¢ {tipo}: {count} ({count/len(df_tic_q3)*100:.1f}%)")

# An√°lise para Mec√¢nica e Transporte
if 'Mec√¢nica e Transporte' in df_discrepancia['do_set_nosetor'].values:
    df_mec = df_discrepancia[df_discrepancia['do_set_nosetor'] == 'Mec√¢nica e Transporte']
    df_mec_q3 = df_mec[df_mec['quadrante'] == 'Q3']
    
    print("\n\nüîß SETOR MEC√ÇNICA E TRANSPORTE:")
    
    if len(df_mec_q3) > 0:
        print(f"\nQ3 (Pesquisador mais rigoroso): {len(df_mec_q3)} projetos")
        natureza_processo = df_mec_q3[df_mec_q3['daproj_tpnatureza'] == 'Processo']
        print(f"  ‚Ä¢ Projetos de natureza 'Processo': {len(natureza_processo)} projetos")
        if len(natureza_processo) > 0:
            print(f"    ‚Üí Representa {len(natureza_processo)/len(df_mec_q3)*100:.1f}% do Q3 em Mec√¢nica")
            print("    ‚ö†Ô∏è HOTSPOT IDENTIFICADO: Alta discord√¢ncia em projetos de Processo")
```

```{python}
#| label: analise-riscos

# Gr√°fico 3: Compara√ß√£o direta Q2 vs Q3
print("\n3. Identifica√ß√£o de Hotspots Espec√≠ficos:")
print("=" * 80)

# Criar DataFrame com todas as combina√ß√µes
df_combinacoes = df_discrepancia.groupby(['do_set_nosetor', 'daproj_tppbpade', 'daproj_tpnatureza', 'quadrante']).size().reset_index(name='count')

# Pivotear para ter Q2 e Q3 como colunas
df_pivot = df_combinacoes.pivot_table(
    index=['do_set_nosetor', 'daproj_tppbpade', 'daproj_tpnatureza'],
    columns='quadrante',
    values='count',
    fill_value=0
).reset_index()

# Calcular diferen√ßa Q2 - Q3
df_pivot['diferenca_q2_q3'] = df_pivot['Q2'] - df_pivot['Q3']
df_pivot['total_discrepancia'] = df_pivot['Q2'] + df_pivot['Q3']

# Top 10 combina√ß√µes com maior diferen√ßa absoluta
top_diferenca = df_pivot.nlargest(10, 'total_discrepancia')

print("\nüéØ TOP 10 HOTSPOTS DE DISCREP√ÇNCIA (Setor + Tipo + Natureza):")
print("-" * 100)
print(f"{'Setor':<25} {'Tipo':<35} {'Natureza':<15} {'Q2':>6} {'Q3':>6} {'Total':>8} {'Tend√™ncia':<20}")
print("-" * 100)

for idx, row in top_diferenca.iterrows():
    setor = row['do_set_nosetor'][:23] + '..' if len(row['do_set_nosetor']) > 25 else row['do_set_nosetor']
    tipo = row['daproj_tppbpade'][:33] + '..' if len(str(row['daproj_tppbpade'])) > 35 else str(row['daproj_tppbpade'])
    natureza = str(row['daproj_tpnatureza'])[:15]
    
    if row['Q2'] > row['Q3']:
        tendencia = "Min. mais rigoroso"
    elif row['Q3'] > row['Q2']:
        tendencia = "Pesq. mais rigoroso"
    else:
        tendencia = "Equilibrado"
    
    print(f"{setor:<25} {tipo:<35} {natureza:<15} {row['Q2']:>6} {row['Q3']:>6} {row['total_discrepancia']:>8} {tendencia:<20}")

# Visualiza√ß√£o interativa com Plotly
fig = px.scatter(
    top_diferenca,
    x='Q2',
    y='Q3',
    size='total_discrepancia',
    color='do_set_nosetor',
    hover_data=['daproj_tppbpade', 'daproj_tpnatureza'],
    title='Mapa de Hotspots: Q2 vs Q3 por Combina√ß√£o de Vari√°veis',
    labels={
        'Q2': 'Quantidade em Q2 (Minist√©rio mais rigoroso)',
        'Q3': 'Quantidade em Q3 (Pesquisador mais rigoroso)',
        'do_set_nosetor': 'Setor'
    }
)

# Adicionar linha de equil√≠brio
max_val = max(top_diferenca['Q2'].max(), top_diferenca['Q3'].max())
fig.add_shape(
    type="line",
    x0=0, y0=0, x1=max_val, y1=max_val,
    line=dict(color="gray", width=2, dash="dash")
)

fig.update_layout(height=600, width=900)
fig.show()
```

# Identifica√ß√£o de Padr√µes Cr√≠ticos
```{python}
# An√°lise de padr√µes espec√≠ficos por setor
print("\nüîç PADR√ïES CR√çTICOS IDENTIFICADOS:")
print("=" * 80)

# Padr√£o 1: TIC com DE e Servi√ßo
tic_de_servico = df_discrepancia[
    (df_discrepancia['do_set_nosetor'] == 'TIC') & 
    (df_discrepancia['daproj_tppbpade'] == 'DE - Desenvolvimento Experimental') &
    (df_discrepancia['daproj_tpnatureza'] == 'Servi√ßo')
]

if len(tic_de_servico) > 0:
    q2_count = len(tic_de_servico[tic_de_servico['quadrante'] == 'Q2'])
    q3_count = len(tic_de_servico[tic_de_servico['quadrante'] == 'Q3'])
    total = len(tic_de_servico)
    
    print(f"\n1. TIC + Desenvolvimento Experimental + Servi√ßo:")
    print(f"   Total de projetos em discrep√¢ncia: {total}")
    print(f"   Q2 (Min. mais rigoroso): {q2_count} ({q2_count/total*100:.1f}%)")
    print(f"   Q3 (Pesq. mais rigoroso): {q3_count} ({q3_count/total*100:.1f}%)")
    print(f"   ‚ö†Ô∏è ALERTA: Alta concentra√ß√£o em Q2 indica poss√≠vel lacuna de compreens√£o do Minist√©rio sobre inova√ß√µes em servi√ßos de TIC")

# Padr√£o 2: Mec√¢nica e Transporte com Processo
mec_processo = df_discrepancia[
    (df_discrepancia['do_set_nosetor'] == 'Mec√¢nica e Transporte') & 
    (df_discrepancia['daproj_tpnatureza'] == 'Processo')
]

if len(mec_processo) > 0:
    q2_count = len(mec_processo[mec_processo['quadrante'] == 'Q2'])
    q3_count = len(mec_processo[mec_processo['quadrante'] == 'Q3'])
    total = len(mec_processo)
    
    print(f"\n2. Mec√¢nica e Transporte + Processo:")
    print(f"   Total de projetos em discrep√¢ncia: {total}")
    print(f"   Q2 (Min. mais rigoroso): {q2_count} ({q2_count/total*100:.1f}%)")
    print(f"   Q3 (Pesq. mais rigoroso): {q3_count} ({q3_count/total*100:.1f}%)")
    if q3_count > q2_count:
        print(f"   ‚ö†Ô∏è ALERTA: Pesquisadores mais rigorosos em processos industriais - poss√≠vel risco de compliance")

# An√°lise por tipo de projeto
print("\n\nüìä DISTRIBUI√á√ÉO GERAL POR TIPO DE PROJETO:")
tipo_dist = df_discrepancia.groupby(['daproj_tppbpade', 'quadrante']).size().unstack(fill_value=0)
tipo_dist['Total'] = tipo_dist.sum(axis=1)
tipo_dist['%_Q2'] = tipo_dist['Q2'] / tipo_dist['Total'] * 100
tipo_dist['%_Q3'] = tipo_dist['Q3'] / tipo_dist['Total'] * 100

print(tipo_dist[['Q2', 'Q3', 'Total', '%_Q2', '%_Q3']].round(1))
```

# An√°lise de Riscos e Recomenda√ß√µes
```{python} 
# Quantifica√ß√£o dos riscos
print("\nüíº AN√ÅLISE DE RISCOS ASSOCIADOS:")
print("=" * 80)

# Risco 1: Volume de recursos (Q2)
projetos_q2 = len(df_discrepancia[df_discrepancia['quadrante'] == 'Q2'])
print(f"\nüö® RISCO OPERACIONAL (Q2):")
print(f"Total de projetos em Q2: {projetos_q2:,}")
print(f"Percentual sobre total de discrep√¢ncias: {projetos_q2/len(df_discrepancia)*100:.1f}%")

# Identificar setores de maior risco em Q2
risco_q2_setor = df_discrepancia[df_discrepancia['quadrante'] == 'Q2']['do_set_nosetor'].value_counts().head(3)
print("\nSetores com maior volume de recursos potenciais:")
for setor, count in risco_q2_setor.items():
    print(f"  ‚Ä¢ {setor}: {count:,} projetos ({count/projetos_q2*100:.1f}% do Q2)")

# Risco 2: Compliance (Q3)
projetos_q3 = len(df_discrepancia[df_discrepancia['quadrante'] == 'Q3'])
print(f"\n‚ö†Ô∏è RISCO DE COMPLIANCE (Q3):")
print(f"Total de projetos em Q3: {projetos_q3:,}")
print(f"Percentual sobre total de discrep√¢ncias: {projetos_q3/len(df_discrepancia)*100:.1f}%")

# Identificar setores de maior risco em Q3
risco_q3_setor = df_discrepancia[df_discrepancia['quadrante'] == 'Q3']['do_set_nosetor'].value_counts().head(3)
print("\nSetores com maior risco de compliance:")
for setor, count in risco_q3_setor.items():
    print(f"  ‚Ä¢ {setor}: {count:,} projetos ({count/projetos_q3*100:.1f}% do Q3)")

# Matriz de risco
print("\n\nüìä MATRIZ DE RISCO POR SETOR:")
matriz_risco = pd.DataFrame()
for setor in df_discrepancia['do_set_nosetor'].unique():
    if pd.notna(setor):
        df_setor = df_discrepancia[df_discrepancia['do_set_nosetor'] == setor]
        q2_setor = len(df_setor[df_setor['quadrante'] == 'Q2'])
        q3_setor = len(df_setor[df_setor['quadrante'] == 'Q3'])
        total_setor = len(df_setor)
        
        matriz_risco = pd.concat([matriz_risco, pd.DataFrame({
            'Setor': [setor],
            'Risco_Operacional_Q2': [q2_setor],
            'Risco_Compliance_Q3': [q3_setor],
            'Total_Discrepancia': [total_setor],
            '√çndice_Risco': [(q2_setor * 0.4 + q3_setor * 0.6) / total_setor * 100]  # Q3 tem peso maior
        })], ignore_index=True)

matriz_risco = matriz_risco.sort_values('√çndice_Risco', ascending=False)
print(matriz_risco.head(10).to_string(index=False))
```

# Conclus√µes e Recomenda√ß√µes Acion√°veis
```{python}
print("\nüìã CONCLUS√ïES E RECOMENDA√á√ïES ACION√ÅVEIS:")
print("=" * 80)

print("""
## Principais Descobertas:

1. **Concentra√ß√£o Setorial das Discrep√¢ncias:**
   - TIC apresenta a maior taxa de Q2, indicando rigor excessivo do Minist√©rio
   - Mec√¢nica e Transporte tem alta taxa de Q3, sugerindo aprova√ß√µes question√°veis

2. **Padr√µes por Tipo de Projeto:**
   - Desenvolvimento Experimental (DE) tem maior propens√£o a Q2
   - Pesquisa B√°sica (PB) apresenta distribui√ß√£o mais equilibrada

3. **Hotspots Cr√≠ticos Identificados:**
   - TIC + DE + Servi√ßo: Alto volume em Q2
   - Mec√¢nica + Processo: Concentra√ß√£o em Q3

## Recomenda√ß√µes Estrat√©gicas:

### 1. A√á√ïES IMEDIATAS (0-3 meses):
   a) **For√ßa-tarefa TIC:** Revisar crit√©rios para projetos DE em servi√ßos
   b) **Auditoria Mec√¢nica:** Verificar projetos Q3 de processos industriais
   c) **Capacita√ß√£o emergencial:** Workshops setoriais para alinhamento

### 2. A√á√ïES DE M√âDIO PRAZO (3-6 meses):
   a) **Sistema de dupla checagem:** Para combina√ß√µes de alto risco
   b) **Guias setoriais:** Desenvolver crit√©rios espec√≠ficos por setor
   c) **Painel de monitoramento:** Dashboard em tempo real de discrep√¢ncias

### 3. A√á√ïES DE LONGO PRAZO (6-12 meses):
   a) **Redesenho do processo:** Incluir etapa de concilia√ß√£o
   b) **IA para suporte:** Sistema de recomenda√ß√£o baseado em casos anteriores
   c) **Programa de certifica√ß√£o:** Para avaliadores por √°rea de expertise

## Impactos Esperados:
- Redu√ß√£o de 30% no volume de recursos em Q2
- Diminui√ß√£o de 50% no risco de compliance em Q3
- Economia estimada de R$ XX milh√µes em custos administrativos
- Aumento da seguran√ßa jur√≠dica do programa
""")

# Exportar resultados
print("\nüíæ Exportando resultados da an√°lise...")
df_discrepancia.to_csv('discrepancias_q2_q3_detalhado.csv', index=False, encoding='utf-8')
matriz_risco.to_csv('matriz_risco_setorial.csv', index=False, encoding='utf-8')
print("‚úÖ Arquivos exportados com sucesso!")

print("\n" + "=" * 80)
print("AN√ÅLISE DE DISCREP√ÇNCIAS CONCLU√çDA")
print("=" * 80)
```